# UniHan tutorial

## Setup

This LiveBook requires you to connect to a running IEx node from  `Unicode.Unihan`.

```elixir
import Unicode.Unihan
```

The `Unihan` module lets you work with the Unihan database at three levels of granularity:

* individual characters,
* population of characters, and
* attributes of/fields within characters

This LiveBook walks you through these three levels.

## Single Unicode Lookup

The `Unihan` library provides, first and foremost, fast lookups of the range of data within the Unihan database.  The function `unihan/1` accepts a variety of input, and returns the information contained within the Unihan database as a parsed map.

The character "萬", standing for ten-thousand in Zh-T, will be used as an example.

```elixir
# usage as codepoint
unihan(33836)
```

```elixir
# use as string grapheme
unihan(33836) == unihan("萬")
```

```elixir
# use as hex string
unihan(33836) == unihan("U+842C")
```

The map can be accessed through the unicode keys **as atoms**.  These keys are specified in [Annex #38](https://www.unicode.org/reports/tr38/).

The values have been further parsed, often into maps of their own; key naming of these smaller maps are not specified by Unihan, and have taken (in general) to be consistent to the implementation in Python's [unihan-etl](https://github.com/cihai/unihan-etl/blob/master/src/unihan_etl/expansion.py) library.

Note that these maps can be accessed using `Access` (square brackets `[]`), or the method dot notation (`.`).  The former returns `nil` when the key does not exist, whereas the latter throws an exception.

```elixir
# parses to an int
IO.inspect(unihan("萬")[:kGradeLevel])
# parses to a list
IO.inspect(unihan("萬")[:kCantonese])
# parses to a map
IO.inspect(unihan("萬")[:kTotalStrokes])
```

Often we would like to return from a map or a codepoint to its string grapheme representation.  The `to_string/1` function lets you do that.

```elixir
IO.inspect(Unicode.Unihan.to_string(33836))

map = unihan("萬")
IO.inspect(Unicode.Unihan.to_string(map))
```

Given that you'd often have a list of maps returned from population-level queries (in the next section), `to_string/1` also accepts a list of maps.

## Population-level Information

`Unihan` provides 2 functions, `filter/1` and `reject/1`, which lets you isolate subset of codepoints from the `@unihan` map.  Both of these accepts a 1-arity function.

The following example selects, from the full `@unihan`, the characters that Grade 1 & 2 students are expected to learn.  Since we have parsed `kGradeLevel` into an integer for you, you can use the comparison operator `<=` directly:

```elixir
filter(fn char ->
  char[:kGradeLevel] <= 2
end)
|> Enum.count()
```

In practice, the 1-arity function can be written more conveniently using the capture `&` syntax, especially when they are chained together, as in the following usage where we want the characters that Grade 1 and 2 students are expected to learn, *but* only if they have "si1" as the sound in Cantonese:

```elixir
filter(
  &(&1[:kGradeLevel] <= 2 and
      &1[:kCantonese][:tone] == "1")
)
|> Enum.sort_by(fn {_codepoint, map} ->
  map[:kTotalStrokes][:"zh-Hant"]
end)
|> Enum.map(fn {_codepoint, map} ->
  Unicode.Unihan.to_string(map)
end)
```

Here we also see the usage of `to_string/1` acting on a list of maps to return their human-friendly string representation.

`reject/1` works similarly:

```elixir
reject(&(&1[:kTotalStrokes][:"zh-Hant"] < 60))
|> Enum.map(fn {_codepoint, map} ->
  Unicode.Unihan.to_string(map)
end)
```

(That blob?  It's a character containing 6 distinct characters: cloud, cloud, cloud, dragon, dragon, dragon.  You probably guessed correctly that it means *dragon flying*.)

## Unihan field parsing

Unihan fields are given as a String, that encapsulates complex meaning.  For example, for "萬", its `kHanyuPinyin` is given as `53247.080:wàn`.  This can be parsed according to the specifications:

> The 漢語拼音 Hànyǔ Pīnyīn reading(s) appearing in the edition of 《漢語大字典》 Hànyǔ Dà Zìdiǎn (HDZ) specified in the “kHanYu” property description (q.v.). Each location has the form “ABCDE.XYZ” (as in “kHanYu”); multiple locations for a given pīnyīn reading are separated by commas. The list of locations is followed by a colon, followed by a comma-separated list of one or more pīnyīn readings. Where multiple pīnyīn readings are associated with a given mapping, these are ordered as in HDZ (for the most part reflecting relative commonality).

The function `Unicode.Unihan.Utils.decode_value/3` was used to parse the values.  These functions are also available publicly.
